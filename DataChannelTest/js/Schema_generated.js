// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var RemoteSupport = RemoteSupport || {};

/**
 * @const
 * @namespace
 */
RemoteSupport.Test = RemoteSupport.Test || {};

/**
 * @enum {number}
 */
RemoteSupport.Test.messageType = {
  Text: 0,
  Stream: 1
};

/**
 * @enum {string}
 */
RemoteSupport.Test.messageTypeName = {
  0: 'Text',
  1: 'Stream'
};

/**
 * @constructor
 */
RemoteSupport.Test.Message = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {RemoteSupport.Test.Message}
 */
RemoteSupport.Test.Message.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {RemoteSupport.Test.Message=} obj
 * @returns {RemoteSupport.Test.Message}
 */
RemoteSupport.Test.Message.getRootAsMessage = function(bb, obj) {
  return (obj || new RemoteSupport.Test.Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {RemoteSupport.Test.messageType}
 */
RemoteSupport.Test.Message.prototype.MessageType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {RemoteSupport.Test.messageType} */ (this.bb.readInt8(this.bb_pos + offset)) : RemoteSupport.Test.messageType.Text;
};

/**
 * @returns {number}
 */
RemoteSupport.Test.Message.prototype.TimeStamp = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @returns {number}
 */
RemoteSupport.Test.Message.prototype.Body = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
RemoteSupport.Test.Message.prototype.BodyLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
RemoteSupport.Test.Message.prototype.BodyArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
RemoteSupport.Test.Message.startMessage = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {RemoteSupport.Test.messageType} MessageType
 */
RemoteSupport.Test.Message.addMessageType = function(builder, MessageType) {
  builder.addFieldInt8(0, MessageType, RemoteSupport.Test.messageType.Text);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} TimeStamp
 */
RemoteSupport.Test.Message.addTimeStamp = function(builder, TimeStamp) {
  builder.addFieldInt32(1, TimeStamp, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} BodyOffset
 */
RemoteSupport.Test.Message.addBody = function(builder, BodyOffset) {
  builder.addFieldOffset(2, BodyOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
RemoteSupport.Test.Message.createBodyVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
RemoteSupport.Test.Message.startBodyVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
RemoteSupport.Test.Message.endMessage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
RemoteSupport.Test.Message.finishMessageBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {RemoteSupport.Test.messageType} MessageType
 * @param {number} TimeStamp
 * @param {flatbuffers.Offset} BodyOffset
 * @returns {flatbuffers.Offset}
 */
RemoteSupport.Test.Message.createMessage = function(builder, MessageType, TimeStamp, BodyOffset) {
  RemoteSupport.Test.Message.startMessage(builder);
  RemoteSupport.Test.Message.addMessageType(builder, MessageType);
  RemoteSupport.Test.Message.addTimeStamp(builder, TimeStamp);
  RemoteSupport.Test.Message.addBody(builder, BodyOffset);
  return RemoteSupport.Test.Message.endMessage(builder);
}

// Exports for Node.js and RequireJS
this.RemoteSupport = RemoteSupport;
